package com.mateo.prglangrecognition.gui;

import com.mateo.prglangrecognition.langrecognitionnet.LangRecognitionException;
import com.mateo.prglangrecognition.langrecognitionnet.LangRecognitionNet;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.*;

import static com.mateo.prglangrecognition.gui.TrainingBackgroundOperation.Callbackable;
import static java.lang.Short.MAX_VALUE;
import static java.util.Collections.max;
import static java.util.logging.Level.SEVERE;
import static java.util.logging.Logger.getLogger;
import static javax.swing.GroupLayout.*;
import static javax.swing.GroupLayout.Alignment.LEADING;
import static javax.swing.GroupLayout.Alignment.TRAILING;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import static javax.swing.JFileChooser.FILES_ONLY;
import static javax.swing.JOptionPane.showMessageDialog;
import static javax.swing.JPopupMenu.Separator;
import static javax.swing.LayoutStyle.ComponentPlacement;
import static javax.swing.LayoutStyle.ComponentPlacement.RELATED;
import static javax.swing.SwingConstants.LEFT;
import static javax.swing.SwingUtilities.invokeLater;
import static javax.swing.UIManager.getSystemLookAndFeelClassName;
import static javax.swing.UIManager.setLookAndFeel;

public class Application extends JFrame implements Callbackable {
    
    public Application() {
        setTitle(APPNAME);
        initComponents();
        myInitComponents();
    }

    private void myInitComponents() {
        tableView = new JTable(new LangRecogTableModel());
        scrollPane.setViewportView(tableView);

        logFrame = new LogFrame(300, 150);
        progressStatus = new ProgressStatus(statusBar);

        fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(FILES_ONLY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathTextField = new JTextField();
        scrollPane = new JScrollPane();
        statusBar = new JLabel();
        windowMenu = new JMenuBar();
        fileMenu = new JMenu();
        recognizeMenuItem = new JMenuItem();
        networkMenu = new JMenu();
        loadScriptMenuItem = new JMenuItem();
        loadSavedNetMenuItem = new JMenuItem();
        jSeparator1 = new Separator();
        saveNetworkMenuItem = new JMenuItem();
        logMenu = new JMenu();
        showLogMenuItem = new JMenuItem();

        setDefaultCloseOperation(EXIT_ON_CLOSE);

        pathTextField.setText("Path");
        pathTextField.setEnabled(false);

        statusBar.setHorizontalAlignment(LEFT);

        fileMenu.setText("File");

        recognizeMenuItem.setText("Recognize");
        recognizeMenuItem.setToolTipText("");
        recognizeMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                recognizeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(recognizeMenuItem);

        windowMenu.add(fileMenu);

        networkMenu.setText("Network");

        loadScriptMenuItem.setText("Load training script");
        loadScriptMenuItem.setActionCommand("Load script");
        loadScriptMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadScriptMenuItemActionPerformed(evt);
            }
        });
        networkMenu.add(loadScriptMenuItem);
        loadScriptMenuItem.getAccessibleContext().setAccessibleName("jMenuItem1");

        loadSavedNetMenuItem.setText("Load saved network");
        loadSavedNetMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadSavedNetMenuItemActionPerformed(evt);
            }
        });
        networkMenu.add(loadSavedNetMenuItem);
        networkMenu.add(jSeparator1);

        saveNetworkMenuItem.setText("Save network");
        saveNetworkMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveNetworkMenuItemActionPerformed(evt);
            }
        });
        networkMenu.add(saveNetworkMenuItem);

        windowMenu.add(networkMenu);

        logMenu.setText("Log");

        showLogMenuItem.setText("Show log");
        showLogMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                showLogMenuItemActionPerformed(evt);
            }
        });
        logMenu.add(showLogMenuItem);

        windowMenu.add(logMenu);

        setJMenuBar(windowMenu);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(LEADING)
                        .addGroup(TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(TRAILING)
                                        .addComponent(statusBar, DEFAULT_SIZE, DEFAULT_SIZE, MAX_VALUE)
                                        .addComponent(scrollPane)
                                        .addComponent(pathTextField, DEFAULT_SIZE, 382, MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(LEADING)
                        .addGroup(TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pathTextField, PREFERRED_SIZE, DEFAULT_SIZE, PREFERRED_SIZE)
                                .addPreferredGap(RELATED)
                                .addComponent(scrollPane, PREFERRED_SIZE, 224, PREFERRED_SIZE)
                                .addPreferredGap(RELATED)
                                .addComponent(statusBar, PREFERRED_SIZE, 21, PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showLogMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_showLogMenuItemActionPerformed
        logFrame.setVisible(true);
    }//GEN-LAST:event_showLogMenuItemActionPerformed

    private void loadScriptMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loadScriptMenuItemActionPerformed
        if (blockAllActions.weakCompareAndSet(false, true)) {
            if (fileChooser.showOpenDialog(this) == APPROVE_OPTION) {
                Thread thread = new Thread(new TrainingBackgroundOperation(fileChooser.getSelectedFile().toString(),
                        logFrame.getWriter(), progressStatus, this));
                thread.start();
                statusBar.setText("Processing started...");
            } else {
                blockAllActions.set(false);
            }
        } else {
            showBlockActionsMessage();
        }
    }//GEN-LAST:event_loadScriptMenuItemActionPerformed

    private void recognizeMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_recognizeMenuItemActionPerformed
        if (recog == null) {
            showMessageDialog(this, "Network hasn't been loaded");
            return;
        }

        if (!blockAllActions.get()) {
            if (fileChooser.showOpenDialog(this) == APPROVE_OPTION) {
                try {
                    String file = fileChooser.getSelectedFile().toString();
                    logFrame.getWriter().write("Recognizing: " + file);
                    Map<String, Double> result = recog.recognize(file);
                    pathTextField.setText(file);
                    logFrame.getWriter().write(result.toString());
                    fillTable(result);
                } catch (LangRecognitionException ex) {
                    Throwable cause = ex.getCause();
                    String message = ex.getMessage() + (cause != null ? " (Cause: " + cause.getMessage() + ")" : "");
                    showMessageDialog(this, message);
                    logFrame.getWriter().write("Error: " + message);
                }
            }
        } else
            showBlockActionsMessage();
    }//GEN-LAST:event_recognizeMenuItemActionPerformed

    private void saveNetworkMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveNetworkMenuItemActionPerformed
        if (recog == null) {
            showMessageDialog(this, "Network hasn't been loaded");
            return;
        }

        if (!blockAllActions.get()) {
            if (fileChooser.showSaveDialog(this) == APPROVE_OPTION) {
                try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()))) {
                    out.writeObject(recog);
                    logFrame.getWriter().write("Network successfully saved to " + fileChooser.getSelectedFile());
                } catch (IOException ex) {
                    String errorMsg = "Cannot save network (" + ex.getMessage() + ")";
                    showMessageDialog(this, errorMsg);
                    logFrame.getWriter().write(errorMsg);
                }
            }
        } else
            showBlockActionsMessage();
    }//GEN-LAST:event_saveNetworkMenuItemActionPerformed

    private void loadSavedNetMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loadSavedNetMenuItemActionPerformed
        if (!blockAllActions.get()) {
            if (fileChooser.showOpenDialog(this) == APPROVE_OPTION) {
                try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()))) {
                    recog = (LangRecognitionNet) in.readObject();
                    logFrame.getWriter().write("Network successfully loaded from " + fileChooser.getSelectedFile());
                } catch (IOException | ClassNotFoundException | ClassCastException ex) {
                    String errorMsg = "Cannot load network (" + ex.getMessage() + ")";
                    showMessageDialog(this, errorMsg);
                    logFrame.getWriter().write(errorMsg);
                }
            }
        } else
            showBlockActionsMessage();
    }//GEN-LAST:event_loadSavedNetMenuItemActionPerformed

    @Override
    public void doCallback(TrainingBackgroundOperation obj) {
        if (obj == null) {
            String message = "Critical error occurred";
            showMessageDialog(networkMenu, message);
            logFrame.getWriter().write(message);
        } else if (obj.getEx() == null) {
            recog = obj.getRecog();
            new TrainingChart(500, 400, recog.getEpochErrData()).setVisible(true);
        } else {
            Exception ex = obj.getEx();
            Throwable cause = ex.getCause();
            String message = ex.getMessage() + (cause != null ? " (Cause: " + cause.getMessage() + ")" : "");
            showMessageDialog(networkMenu, message);
            logFrame.getWriter().write(message);
        }

        statusBar.setText("");
        blockAllActions.set(false);
    }

    private void fillTable(Map<String, Double> result) {
        tableView.clearSelection();
        LangRecogTableModel model = (LangRecogTableModel) tableView.getModel();
        model.loadResult(result);

        Collection<Double> coll = result.values();
        Double max = max(coll);
        int i = 0;
        for (Double item : coll) {
            if (item.equals(max))
                break;
            else
                i++;
        }

        tableView.changeSelection(i, 0, false, false);
    }

    private void showBlockActionsMessage() {
        showMessageDialog(this, "Please wait until background operation would be completed");
    }

    public static void main(String args[]) {
        try {
            setLookAndFeel(getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            getLogger(Application.class.getName()).log(SEVERE, null, ex);
        }

        invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }

    private final String APPNAME = "Language Recognition";

    private JTable tableView;
    private LogFrame logFrame;
    private LangRecognitionNet recog;
    private ProgressStatus progressStatus;
    private AtomicBoolean blockAllActions = new AtomicBoolean(false);
    private JFileChooser fileChooser;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JMenu fileMenu;
    private Separator jSeparator1;
    private JMenuItem loadSavedNetMenuItem;
    private JMenuItem loadScriptMenuItem;
    private JMenu logMenu;
    private JMenu networkMenu;
    private JTextField pathTextField;
    private JMenuItem recognizeMenuItem;
    private JMenuItem saveNetworkMenuItem;
    private JScrollPane scrollPane;
    private JMenuItem showLogMenuItem;
    private JLabel statusBar;
    private JMenuBar windowMenu;
    // End of variables declaration//GEN-END:variables

}